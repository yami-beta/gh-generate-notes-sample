name: release-pr

on:
  push:
    branches:
      - tmp/v**

jobs:
  release-pr:
    runs-on: ubuntu-latest

    env:
      GIT_AUTHOR_NAME: ${{ github.actor }}
      GIT_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com

    permissions:
      contents: "write"
      pull-requests: "write"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          git config --global user.email "${GIT_AUTHOR_EMAIL}"
          git config --global user.name "${GIT_AUTHOR_NAME}"

          RELEASE_VERSION=$(echo "${{ github.ref_name }}" | awk -F '/' '{print $2}')
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> "$GITHUB_ENV"

          BRANCH_NAME=version/${RELEASE_VERSION}
          echo "BRANCH_NAME=${BRANCH_NAME}" >> "$GITHUB_ENV"

          git switch -c ${BRANCH_NAME}
          git commit -m "release: ${RELEASE_VERSION}" --allow-empty
          git push --force-with-lease origin ${BRANCH_NAME}
      - name: check exist pr
        run: |
          PR_NUMBER=$(gh pr view --json 'number' --jq '.number')
          echo "PR_NUMBER=${PR_NUMBER}" >> "$GITHUB_ENV"

          LATEST_TAG=$(gh release view --json 'tagName' --jq '.tagName')
          echo "LATEST_TAG=${LATEST_TAG}" >> "$GITHUB_ENV"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/github-script@v6
        if: ${{ success() }}
        with:
          script: |
            const result = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: process.env.RELEASE_VERSION,
              target_commitish: process.env.GITHUB_REF_NAME,
              previous_tag_name: process.env.LATEST_TAG,
            })

            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: process.env.PR_NUMBER,
              title: `release: ${result.data.name}`,
              body: `${result.data.body}`,
            })
      - uses: actions/github-script@v6
        if: ${{ failure() }}
        with:
          script: |
            const result = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: process.env.RELEASE_VERSION,
              target_commitish: process.env.GITHUB_REF_NAME,
              previous_tag_name: process.env.LATEST_TAG,
            })

            github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: process.env.BRANCH_NAME,
              base: process.env.GITHUB_REF_NAME,
              title: `release: ${result.data.name}`,
              body: `${result.data.body}`,
            })
